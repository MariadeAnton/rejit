#include "dynasm/dasm_x86.h"

| .if X64
| .arch x64
| .define STR, rdi
| .define SAV, r11
| .define TMPB, r12b
| .define TMPD0, r12d
| .define TMPD1, edx
| .define RET, rax
| .define SP, rsp
| .define TOS, qword [SP]
| .macro discard
| add SP, 8
| .endmacro
| .macro save
| mov SAV, STR
| .endmacro
| .macro unsave
| .endmacro
| .else
| .arch x86
| .define STR, edi
| .define SAV, TOS
| .define TMPB, dh
| .define TMPD0, edx
| .define TMPD1, ecx
| .define RET, eax
| .define SP, esp
| .define TOS, dword [SP]
| .macro discard
| add SP, 4
| .endmacro
| .macro save
| push STR
| .endmacro
| .macro unsave
| discard
| .endmacro
| .endif
| .section code
| .globals lbl_
| .actionlist actions

| .define CONST, eax

static void compile_prolog(dasm_State** Dst) {
    | .if not X64
    | mov STR, [esp+4]
    | .endif
    | save
    | mov CONST, 1025
}

static void compile_epilog(dasm_State** Dst) {
    | mov RET, STR
    | sub RET, SAV
    | unsave
    | ret
    |=>0:
    | mov RET, -1
    | unsave
    | ret
}

static void compile_one(dasm_State** Dst, rejit_instruction* instr, int* errpc,
    int* pcl) {
    rejit_instruction* ia, *ib;
    unsigned long magic;
    char min;
    int ebk = *errpc, bk;
    if (instr->kind > ISKIP) return;
    switch (instr->kind) {
    case ISKIP: printf("ISKIP was added to INULL\n"); abort();
    case ICHR:
        | cmp byte [STR], instr->value
        | jne =>*errpc
        | inc STR
        break;
    case ISTAR:
    case IPLUS:
    case IOPT:
        ia = instr+1;
        if (instr->kind == IPLUS) compile_one(Dst, ia, errpc, pcl);
        | push STR
        *errpc = *pcl;
        GROW;
        bk = *pcl;
        GROW;
        if (instr->kind != IOPT)
            |=>bk:
        if (instr->kind == IPLUS) unskip(ia);
        compile_one(Dst, ia, errpc, pcl);
        /*
           XXX: For IOPT, this will basically generate:

           mov TOS, STR
           errpc:
           pop STR

           which seems kind of redundant to me? I mean, I guess a jump may not be
           much faster...

           According to http://www.agner.org/optimize/instruction_tables.pdf,
           a jump to a near memory location takes 1 cycle, addition takes 1 cycle,
           and a mov to memory from a register takes 1 cycle. Popping to a reg
           takes 2 cyles. So the only alternative code I can think of:

           jmp correct ; 1 cycle
           errpc:
           pop STR     ; 2 cycles
           jmp after   ; 1 cycle
           correct:
           add rsp, 8  ; 1 cycle

           would use 3 cycles on failure and 2 cycles on match...just like the
           current code. I need to benchmark it a bit more.
        */
        | mov TOS, STR
        if (instr->kind != IOPT) {
            // Without the braces here, DynAsm generates incorrect code.
            | jmp =>bk
        }
        |=>*errpc:
        | pop STR
        skip(ia);
        break;
    case IMSTAR:
    case IMPLUS:
        ia = instr+1;
        bk = *pcl;
        GROW;
        if (instr->kind == IMSTAR) {
            GROW;
            | jmp =>bk+1
        }
        |=>bk:
        compile_one(Dst, ia, errpc, pcl);
        skip(ia);
        if (instr->kind == IMSTAR)
            |=>bk+1:
        *errpc = bk;
        break;
    case IDOT:
        | movzx TMPD0, byte [STR]
        | bt CONST, TMPD0
        | jb =>*errpc
        | inc STR
        break;
    case IBEGIN:
        | cmp SAV, STR
        | jne =>*errpc
        break;
    case IEND:
        | cmp byte [STR], 0
        | jne =>*errpc
        break;
    case ISET:
        magic = genmagic((const char*)instr->value, &min);
        | mov TMPD0, magic
        | movzx TMPD1, byte [STR]
        | sub TMPD1, min
        | js =>*errpc
        | bt TMPD0, TMPD1
        | jae =>*errpc
        | inc STR
        break;
    case IOR:
        ia = instr+1;
        ib = (rejit_instruction*)instr->value;
        *errpc = *pcl;
        GROW;
        GROW;
        bk = *pcl-1;
        compile_one(Dst, ia, errpc, pcl);
        skip(ia);
        | jmp =>bk
        |=>*errpc:
        *errpc = ebk;
        compile_one(Dst, ib, errpc, pcl);
        skip(ib);
        |=>bk:
        break;
    case IGROUP:
        for (ia = (rejit_instruction*)instr++->value; instr != ia; ++instr) {
            compile_one(Dst, instr, errpc, pcl);
            skip(instr);
        }
        break;
    default: printf("unrecognized opcode: %d\n", instr->kind); abort();
    };
    if (instr->kind != IMSTAR && instr->kind != IMPLUS) *errpc = ebk;
}
