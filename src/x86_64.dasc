/* This Source Code Form is subject to the terms of the Mozilla Public
   License, v. 2.0. If a copy of the MPL was not distributed with this
   file, You can obtain one at http://mozilla.org/MPL/2.0/. */

/* I don't use Vim, but this should make Linguist highlight this file correctly:
   vim: syntax=c */

#include "dynasm/dasm_x86.h"

| .if X64

| .arch x64

| .define STR, rdi
| .define GR, rsi
| .define SAV, r11
| .define TMPB, r8b
| .define TMPD0, r9d
| .define TMPD1, edx
| .define TMPL0, r9
| .define TMPL1, rdx
| .define RET, rax
| .define SP, rsp
| .define TOS, qword [SP]

| .define RED_ZONE_SIZE, 128 // Number of bytes available in the red zone.

| .macro discard
| add SP, 8
| .endmacro

| .macro backup
| mov SAV, STR
| .endmacro

| .macro ubackup
| .endmacro

| .macro save
|| {
|| if (saved < RED_ZONE_SIZE/8) {
|      mov [rsp-8*(saved+1)], STR
||     needs_unsave = 0;
|| } else {
|      push STR
||     needs_unsave = 1;
|| }
|| }
| .endmacro

| .macro gsave
|| {
|| if (needs_unsave)
|      mov STR, TOS
|| else
|      mov STR, [rsp-8*(saved+1)]
|| }
| .endmacro

| .macro rstsave
|| {
|| if (needs_unsave)
|       pop STR
|| else
|       mov STR, [rsp-8*(saved+1)]
|| }
| .endmacro

| .else

| .arch x86

| .define STR, edi
| .define GR, ebx
| .define SAV, TOS
| .define TMPB, ch
| .define TMPD0, edx
| .define TMPD1, ebp
| .define TMPL0, TMPD0
| .define TMPL1, TMPD1
| .define RET, eax
| .define SP, esp
| .define TOS, dword [SP]

| .macro discard
| add SP, 4
| .endmacro

| .macro backup
| push edi
| push ebp
| push ebx
// Add offsets of just-pushed vars to arg offsets.
| mov STR, [esp+16]
| mov GR, [esp+20]
| push STR
| .endmacro

| .macro ubackup
| discard
| pop ebx
| pop ebp
| pop edi
| .endmacro

| .macro save
|| {
|| needs_unsave = 1;
|  push STR
|| }
| .endmacro

| .macro gsave
|  mov STR, TOS
| .endmacro

| .macro rstsave
| pop STR
| .endmacro

| .endif

| .section code
| .globals lbl_
| .actionlist actions

| .define CONST, eax

| .macro unsave
|| if (needs_unsave)
|      discard
| .endmacro

| .type group, rejit_group

static void compile_prolog(dasm_State** Dst) {
    | backup
    | mov CONST, 1025
}

static void compile_epilog(dasm_State** Dst) {
    | mov RET, STR
    | sub RET, SAV
    | ubackup
    | ret
    |=>0:
    | mov RET, -1
    | ubackup
    | ret
}

static void compile_one(dasm_State** Dst, rejit_instruction* instr, int* errpc,
                        int* pcl, int saved, rejit_flags flags) {
    rejit_instruction* ia, *ib, *ic;
    unsigned long magic;
    char min, *s;
    int ebk = *errpc, bk, i, needs_unsave;
    size_t len;
    if (instr->kind > RJ_ISKIP) return;
    switch (instr->kind) {
    case RJ_ISKIP: printf("RJ_ISKIP was added to RJ_INULL\n"); abort();
    case RJ_IWORD:
        s = (char*)instr->value;
        len = strlen(s);
        for (i=0; i<len; ++i) {
            char c = s[i];
            if (flags & RJ_FICASE && isalpha(c)) {
                char uc = toupper(c), lc = tolower(c);
                bk = *pcl;
                GROW;
                | mov TMPB, [STR+i]
                | cmp TMPB, uc
                | je =>bk
                | cmp TMPB, lc
                | jne =>*errpc
                |=>bk:
            } else {
                | cmp byte [STR+i], c
                | jne =>*errpc
            }
        }
        | add STR, len
        break;
    case RJ_ISTAR:
    case RJ_IPLUS:
    case RJ_IOPT:
        ia = instr+1;
        if (instr->kind == RJ_IPLUS)
            compile_one(Dst, ia, errpc, pcl, saved, flags);
        *errpc = *pcl;
        GROW;
        bk = *pcl;
        GROW;
        if (instr->kind != RJ_IOPT)
            |=>bk:
        if (instr->kind == RJ_IPLUS) unskip(ia);
        compile_one(Dst, ia, errpc, pcl, saved, flags);
        if (instr->kind != RJ_IOPT) {
            // Without the braces here, DynAsm generates incorrect code.
            | jmp =>bk
        }
        |=>*errpc:
        skip(ia);
        break;
    case RJ_IREP:
        ia = instr+1;
        for (i=0; i<instr->value; ++i) {
            compile_one(Dst, ia, errpc, pcl, saved, flags);
            unskip(ia);
        }
        *errpc = *pcl;
        GROW;
        for (i=instr->value; i<instr->value2; ++i) {
            compile_one(Dst, ia, errpc, pcl, saved, flags);
            unskip(ia);
        }
        |=>*errpc:
        skip(ia);
        break;
    case RJ_IMSTAR:
    case RJ_IMPLUS:
        ia = instr+1;
        bk = *pcl;
        GROW;
        if (instr->kind == RJ_IMSTAR) {
            GROW;
            | jmp =>bk+1
        }
        |=>bk:
        compile_one(Dst, ia, errpc, pcl, saved, flags);
        skip(ia);
        if (instr->kind == RJ_IMSTAR)
            |=>bk+1:
        *errpc = bk;
        break;
    case RJ_IDOT:
        if (flags & RJ_FDOTALL) {
            | mov TMPB, byte [STR]
            | test TMPB, TMPB
            | jz =>*errpc
        } else {
            | movzx TMPD0, byte [STR]
            | bt CONST, TMPD0
            | jb =>*errpc
        }
        | inc STR
        break;
    case RJ_IBEGIN:
        | cmp SAV, STR
        | jne =>*errpc
        break;
    case RJ_IEND:
        | cmp byte [STR], 0
        | jne =>*errpc
        break;
    case RJ_IBACK:
        bk = *pcl;
        GROW;
        GROW;
        | mov TMPL0, group:GR[instr->value].begin
        | mov TMPL1, group:GR[instr->value].end
        | sub TMPL1, TMPL0
        | jz =>*errpc
        |=>bk:
        | dec TMPL1
        | mov TMPB, [STR+TMPL1]
        | cmp TMPB, [TMPL0+TMPL1]
        | jne =>*errpc
        | test TMPL1, TMPL1
        | jnz =>bk
        | sub TMPL0, group:GR[instr->value].end
        // TMPL0 now holds -len, so str-(-len) == str+len.
        | sub STR, TMPL0
        break;
    case RJ_ISET:
    case RJ_INSET:
        s = (char*)instr->value;
        magic = genmagic(s, &min, &len, flags & RJ_FICASE);
        bk = *pcl;
        #define SK (instr->kind == RJ_ISET ? bk : *errpc)
        #define UK (instr->kind == RJ_ISET ? bk+1 : *errpc)
        #define AE (instr->kind == RJ_ISET ? *errpc : bk)
        GROW;
        GROW;
        if (instr->kind == RJ_INSET) {
            | cmp byte [STR], 0
            | je =>bk+1
        }
        for (i=len+1; i<len*2+1; ++i)
            if (!s[i]) {
                char c = s[i-len-1];
                | cmp byte [STR], c
                | je =>SK
                if (flags & RJ_FICASE) {
                    c = isupper(c) ? tolower(c) : toupper(c);
                    | cmp byte [STR], c
                    | je =>SK
                }
            } else if (s[i] == 'W') {
                int j;
                const char* ust = &s[i-len-1];
                GROW;
                | cmp byte [STR], *ust
                | jne =>*pcl-1
                ++i;
                for (j=1; s[i] == 'U'; ++i, ++j) {
                    | cmp byte[STR+j], ust[j]
                    | jne =>*pcl-1
                }
                --i;
                | add STR, j
                | jmp =>UK
                | =>*pcl-1:
            }
        if (magic) {
            | mov TMPD0, magic
            | movzx TMPD1, byte [STR]
            | sub TMPD1, min
            | js =>AE
            | bt TMPD0, TMPD1
            | jae =>AE
            if (instr->kind == RJ_INSET)
                | jmp =>*errpc
        } else {
            | jmp =>AE
        }
        |=>bk:
        | inc STR
        |=>bk+1:
        break;
    case RJ_IOR:
        ia = instr+1;
        ib = (rejit_instruction*)instr->value;
        ic = (rejit_instruction*)instr->value2;
        | save
        *errpc = *pcl;
        GROW;
        GROW;
        bk = *pcl-1;
        if (needs_unsave) GROW;
        for (; ia != ib; ++ia) {
            compile_one(Dst, ia, errpc, pcl, saved+1, flags);
            skip(ia);
        }
        | jmp =>bk
        |=>*errpc:
        | gsave
        *errpc = needs_unsave ? bk+1 : ebk;
        for (; ia != ic; ++ia) {
            compile_one(Dst, ia, errpc, pcl, saved+1, flags);
            skip(ia);
        }
        *errpc = ebk;
        if (needs_unsave) {
            | jmp =>bk
            |=>bk+1:
            | rstsave
            | jmp =>*errpc
        }
        |=>bk:
        | unsave
        break;
    case RJ_ICGROUP:
    case RJ_IGROUP:
    case RJ_ILAHEAD:
    case RJ_INLAHEAD:
    case RJ_ILBEHIND:
        *errpc = bk = *pcl;
        GROW;
        if (instr->kind != RJ_INLAHEAD) GROW;
        ia = instr+1;
        ib = (rejit_instruction*)instr->value;
        if (instr->kind == RJ_ILBEHIND) {
            len = 0;
            for (; ia != ib; ++ia) {
                if (ia->len == -1) {
                    len = -1;
                    break;
                } else len += ia->len;
            }
            ia = instr+1;
        }
        // Whether or not saves can be eliminated.
        i = (instr->kind == RJ_IGROUP || (instr->kind == RJ_ILBEHIND && len <= 0))
            && ia+1 == ib && ia->kind == RJ_IWORD;
        if (!i)
            | save
        if (instr->kind == RJ_ILBEHIND && len > 0) {
            | sub STR, len
            | cmp STR, SAV
            | jl =>ebk
        }
        for (; ia != ib; ++ia) {
            compile_one(Dst, ia, errpc, pcl, saved+1, flags);
            skip(ia);
        }
        *errpc = ebk;
        if (instr->kind == RJ_INLAHEAD) {
            | rstsave
            | jmp =>*errpc
        } else {
            | jmp =>bk+1
        }
        |=>bk:
        if (!i)
            | rstsave
        if (instr->kind != RJ_INLAHEAD) {
            | jmp =>*errpc
            |=>bk+1:
        }
        if (instr->kind == RJ_ICGROUP) {
            if (needs_unsave)
                | mov TMPL0, TOS
            else {
                | .if X64
                | mov TMPL0, [SP-8*(saved+1)]
                | .else
                || printf("needs_unsave should be true on X86\n"); abort();
                | .endif
            }
        }

        if (instr->kind == RJ_ILAHEAD || instr->kind == RJ_ILBEHIND)
            | rstsave
        else if (instr->kind != RJ_INLAHEAD && !i)
            | unsave

        if (instr->kind == RJ_ICGROUP) {
            | mov group:GR[instr->value2].begin, TMPL0
            | mov group:GR[instr->value2].end, STR
        }
        break;
    default: printf("unrecognized opcode: %d\n", instr->kind); abort();
    };
    if (instr->kind != RJ_IMSTAR && instr->kind != RJ_IMPLUS) *errpc = ebk;
}
